// –í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Shopify –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log("üîß Loading temporary Shopify server configuration");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envVars = {
  SHOPIFY_API_KEY: process.env.SHOPIFY_API_KEY,
  SHOPIFY_API_SECRET: process.env.SHOPIFY_API_SECRET,
  SHOPIFY_APP_URL: process.env.SHOPIFY_APP_URL,
  HOST: process.env.HOST,
  NODE_ENV: process.env.NODE_ENV
};

console.log("üîß Environment variables:", envVars);

// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockShopify = {
  addDocumentResponseHeaders: (request, responseHeaders) => {
    console.log("üìÑ Mock addDocumentResponseHeaders called");
  },
  authenticate: {
    admin: async (request) => {
      console.log("üîê Mock admin authentication called");
      return { admin: { shop: "test-shop.myshopify.com" } };
    }
  },
  unauthenticated: {
    admin: async (request) => {
      console.log("üîì Mock unauthenticated admin called");
      return { admin: { shop: "test-shop.myshopify.com" } };
    }
  },
  login: async (request) => {
    console.log("üîë Mock login called");
    return new Response("Mock login", { status: 200 });
  },
  registerWebhooks: async () => {
    console.log("üîî Mock registerWebhooks called");
  },
  sessionStorage: {
    loadSession: async () => {
      console.log("üíæ Mock loadSession called");
      return null;
    }
  }
};

console.log("‚ö†Ô∏è Using mock Shopify configuration for testing");

export default mockShopify;
export const addDocumentResponseHeaders = mockShopify.addDocumentResponseHeaders;
export const authenticate = mockShopify.authenticate;
export const unauthenticated = mockShopify.unauthenticated;
export const login = mockShopify.login;
export const registerWebhooks = mockShopify.registerWebhooks;
export const sessionStorage = mockShopify.sessionStorage;
