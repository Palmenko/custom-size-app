import { useEffect } from "react";
import { useFetcher } from "@remix-run/react";
import {
  Page,
  Layout,
  Text,
  Card,
  Button,
  BlockStack,
  Box,
  List,
  Link,
  InlineStack,
  DataTable,
  Badge,
  Toast,
} from "@shopify/polaris";
import { TitleBar, useAppBridge } from "@shopify/app-bridge-react";
import { authenticate } from "../shopify.server";
import { json } from "@remix-run/node";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export const loader = async ({ request }) => {
  await authenticate.admin(request);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const measurementsCount = await prisma.measurement.count();
    const activeMeasurementsCount = await prisma.measurement.count({
      where: { active: true }
    });
    const productGroupsCount = await prisma.productGroup.count();
    const activeProductGroupsCount = await prisma.productGroup.count({
      where: { active: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ä–∫–∏
    const recentMeasurements = await prisma.measurement.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' }
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    const recentProductGroups = await prisma.productGroup.findMany({
      take: 5,
      orderBy: { createdAt: 'desc' },
      include: {
        groupMeasurements: {
          include: {
            measurement: true
          }
        }
      }
    });

    return json({
      stats: {
        totalMeasurements: measurementsCount,
        activeMeasurements: activeMeasurementsCount,
        totalProductGroups: productGroupsCount,
        activeProductGroups: activeProductGroupsCount
      },
      recentMeasurements,
      recentProductGroups
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return json({
      stats: {
        totalMeasurements: 0,
        activeMeasurements: 0,
        totalProductGroups: 0,
        activeProductGroups: 0
      },
      recentMeasurements: [],
      recentProductGroups: []
    });
  }
};

export default function Index() {
  const { stats, recentMeasurements, recentProductGroups } = useLoaderData();
  const shopify = useAppBridge();
  const fetcher = useFetcher();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (fetcher.data?.success) {
      shopify.toast.show("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!");
    } else if (fetcher.data?.error) {
      shopify.toast.show("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    }
  }, [fetcher.data, shopify]);

  const handleSeedData = () => {
    fetcher.submit({}, { method: "POST", action: "/api/seed" });
  };

  return (
    <Page>
      <TitleBar title="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–∫–∞–º–∏" />
      <BlockStack gap="500">
        <Layout>
          <Layout.Section>
            <Card>
              <BlockStack gap="500">
                <BlockStack gap="200">
                  <Text as="h2" variant="headingMd">
                    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Custom Size! üéâ
                  </Text>
                  <Text variant="bodyMd" as="p">
                    –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ—Ä–∫–∞–º–∏ –¥–ª—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º —Å –º–µ—Ä–∫–∞–º–∏.
                  </Text>
                </BlockStack>
                
                <BlockStack gap="200">
                  <Text as="h3" variant="headingMd">
                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                  </Text>
                  <InlineStack gap="400">
                    <Card>
                      <BlockStack gap="200">
                        <Text variant="headingLg" as="h4">
                          {stats.totalMeasurements}
                        </Text>
                        <Text variant="bodySm" as="p">
                          –í—Å–µ–≥–æ –º–µ—Ä–æ–∫
                        </Text>
                        <Badge tone={stats.activeMeasurements > 0 ? "success" : "warning"}>
                          {stats.activeMeasurements} –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        </Badge>
                      </BlockStack>
                    </Card>
                    
                    <Card>
                      <BlockStack gap="200">
                        <Text variant="headingLg" as="h4">
                          {stats.totalProductGroups}
                        </Text>
                        <Text variant="bodySm" as="p">
                          –ì—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
                        </Text>
                        <Badge tone={stats.activeProductGroups > 0 ? "success" : "warning"}>
                          {stats.activeProductGroups} –∞–∫—Ç–∏–≤–Ω—ã—Ö
                        </Badge>
                      </BlockStack>
                    </Card>
                  </InlineStack>
                </BlockStack>

                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ */}
                {stats.totalMeasurements === 0 && (
                  <Card>
                    <BlockStack gap="400">
                      <Text as="h3" variant="headingMd">
                        üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
                      </Text>
                      <Text variant="bodyMd" as="p">
                        –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ä–∫–∏ –∏ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
                      </Text>
                      <Button
                        primary
                        onClick={handleSeedData}
                        loading={fetcher.state === "submitting"}
                      >
                        –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                      </Button>
                    </BlockStack>
                  </Card>
                )}
              </BlockStack>
            </Card>
          </Layout.Section>
          
          <Layout.Section variant="oneThird">
            <BlockStack gap="500">
              <Card>
                <BlockStack gap="200">
                  <Text as="h2" variant="headingMd">
                    –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                  </Text>
                  <BlockStack gap="200">
                    <Button
                      url="/app/measurements"
                      variant="primary"
                      fullWidth
                    >
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–∫–∞–º–∏
                    </Button>
                    <Button
                      url="/app/product-groups"
                      variant="primary"
                      fullWidth
                    >
                      –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
                    </Button>
                    <Button
                      url="/app/settings"
                      variant="plain"
                      fullWidth
                    >
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </Button>
                  </BlockStack>
                </BlockStack>
              </Card>
              
              <Card>
                <BlockStack gap="200">
                  <Text as="h2" variant="headingMd">
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ä–∫–∏
                  </Text>
                  {recentMeasurements.length > 0 ? (
                    <List>
                      {recentMeasurements.map((measurement) => (
                        <List.Item key={measurement.id}>
                          {measurement.name}
                          <Badge tone={measurement.active ? "success" : "warning"}>
                            {measurement.active ? "–ê–∫—Ç–∏–≤–Ω–∞" : "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"}
                          </Badge>
                        </List.Item>
                      ))}
                    </List>
                  ) : (
                    <Text variant="bodyMd" as="p" tone="subdued">
                      –ú–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </Text>
                  )}
                </BlockStack>
              </Card>
              
              <Card>
                <BlockStack gap="200">
                  <Text as="h2" variant="headingMd">
                    –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
                  </Text>
                  {recentProductGroups.length > 0 ? (
                    <List>
                      {recentProductGroups.map((group) => (
                        <List.Item key={group.id}>
                          {group.name}
                          <Text variant="bodySm" as="span" tone="subdued">
                            ({group.groupMeasurements.length} –º–µ—Ä–æ–∫)
                          </Text>
                        </List.Item>
                      ))}
                    </List>
                  ) : (
                    <Text variant="bodyMd" as="p" tone="subdued">
                      –ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                    </Text>
                  )}
                </BlockStack>
              </Card>
            </BlockStack>
          </Layout.Section>
        </Layout>
      </BlockStack>
    </Page>
  );
}
