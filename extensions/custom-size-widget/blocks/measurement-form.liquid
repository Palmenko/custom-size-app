{% comment %}
  –§–æ—Ä–º–∞ –º–µ—Ä–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
  –≠—Ç–æ—Ç –±–ª–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –º–µ—Ä–æ–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ "custom size"
{% endcomment %}

{% assign app_url = shop.metafields.custom_size_app.app_url | default: 'http://localhost:62283' %}

<div class="custom-size-container" 
     data-app-url="{{ app_url }}"
     data-shop-url="{{ shop.url }}" 
     data-product-id="{{ product.id }}"
     style="display: none;">
  
  <div class="custom-size-form">
    <h3 class="custom-size-title">–í–∞—à–∏ –º–µ—Ä–∫–∏ –¥–ª—è custom size</h3>
    <div class="custom-size-loading" style="display: block;">
    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–∫...</p>
  </div>
    <div class="custom-size-content" style="display: none;">
      <div class="custom-size-fields"></div>
      <div class="custom-size-error" style="display: none;"></div>
    </div>
  </div>

  <style>
    .custom-size-container {
      margin: 20px 0;
      padding: 20px;
      border: 1px solid #e1e1e1;
      border-radius: 8px;
      background: #f9f9f9;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }
    .custom-size-title {
      margin: 0 0 20px 0;
      color: #333;
      font-size: 18px;
      font-weight: 600;
    }
    .custom-size-fields {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    .custom-size-field {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }
    .custom-size-field label {
      font-weight: 600;
      color: #333;
      font-size: 14px;
      display: flex;
      align-items: center;
    }
    .custom-size-required {
      color: #d82c0d;
      margin-left: 4px;
    }
    .custom-size-description {
      font-size: 12px;
      color: #666;
      margin: 0;
    }
    .custom-size-input-group {
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .custom-size-input-group input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 14px;
      font-family: inherit;
    }
    .custom-size-input-group input:focus {
      outline: none;
      border-color: #007cba;
      box-shadow: 0 0 0 2px rgba(0, 124, 186, 0.2);
    }
    .custom-size-input-group input.error {
      border-color: #d82c0d;
      background-color: #fff5f5;
    }
    .custom-size-input-group input.required-empty {
      border-color: #ffa500;
      background-color: #fff8e1;
    }
    .custom-size-unit {
      color: #666;
      font-size: 14px;
      font-weight: 500;
    }
    .custom-size-error {
      color: #d82c0d;
      font-size: 12px;
      margin: 4px 0 0 0;
      display: none;
    }
    .custom-size-range {
      font-size: 12px;
      color: #666;
      margin: 4px 0 0 0;
    }
    .custom-size-loading {
      text-align: center;
      padding: 20px;
      color: #666;
    }
    .custom-size-error {
      color: #d82c0d;
      text-align: center;
      padding: 20px;
      background: #fff5f5;
      border-radius: 4px;
      border: 1px solid #ffcdd2;
    }
    

  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const container = document.querySelector('.custom-size-container');
      if (!container) return;
      
      const loadingEl = container.querySelector('.custom-size-loading');
      const contentEl = container.querySelector('.custom-size-content');
      const errorEl = container.querySelector('.custom-size-error');
      const fieldsEl = container.querySelector('.custom-size-fields');
      
      if (!loadingEl || !contentEl || !errorEl || !fieldsEl) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –º–µ—Ä–æ–∫');
        return;
      }
      
      const shopUrl = container.dataset.shopUrl;
      const productId = container.dataset.productId;
      const appUrl = container.dataset.appUrl;
      let measurements = [];
      let formData = {};
      
      // –î–µ–ª–∞–µ–º formData –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
      
      
      async function loadMeasurements() {
        try {
          console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–∫–∏...');
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π URL
          let appUrl = container.dataset.appUrl;
          if (appUrl && appUrl.includes('localhost')) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
            const currentPort = window.location.port || '80';
            appUrl = appUrl.replace(/localhost:\d+/, `localhost:${currentPort}`);
            console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç:', appUrl);
          }
          const shopUrl = container.dataset.shopUrl;
          const productId = container.dataset.productId;
          
          if (!appUrl || !shopUrl || !productId) {
            console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', { appUrl, shopUrl, productId });
            return;
          }
          
          console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–∫:', { appUrl, shopUrl, productId });
          
          // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
          const productInfo = getProductInfo();
          console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:', productInfo);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          console.log('=== –û–¢–õ–ê–î–ö–ê ===');
          console.log('appUrl:', appUrl);
          console.log('shopUrl:', shopUrl);
          console.log('productId:', productId);
          console.log('productInfo:', productInfo);
          console.log('================');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–≥–∏
          if (!productInfo.tags) {
            console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–≥–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–æ–≤–∞—Ä –∏–º–µ–µ—Ç —Ç–µ–≥ "—Ç–µ—Å—Ç" –≤ –∞–¥–º–∏–Ω–∫–µ Shopify');
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–≥–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            console.log('üîç –ò—â–µ–º —Ç–µ–≥–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö...');
            
            // –ò—â–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            const dataTags = document.querySelector('[data-tags]');
            if (dataTags) {
              productInfo.tags = dataTags.getAttribute('data-tags');
              console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ data-tags:', productInfo.tags);
            }
            
            // –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageText = document.body.textContent;
            const tagMatch = pageText.match(/—Ç–µ–≥[–∞-—è]*:\s*([–∞-—è—ë\s,]+)/i);
            if (tagMatch) {
              productInfo.tags = tagMatch[1].trim();
              console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', productInfo.tags);
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç
            if (!productInfo.tags) {
              console.log('üîß –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–ì "—Ç–µ—Å—Ç" –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
              productInfo.tags = '—Ç–µ—Å—Ç';
            }
          } else {
            console.log('‚úÖ –¢–µ–≥–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã:', productInfo.tags);
          }
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ç–æ–≤–∞—Ä–∞
          const params = new URLSearchParams({
            productId: productId,
            ...productInfo
          });
          
          const response = await fetch(`${appUrl}/api/product-measurements-groups?${params}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Origin': shopUrl
            }
          });
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
const text = await response.text();
            console.error('–ü–æ–ª—É—á–µ–Ω –Ω–µ-JSON –æ—Ç–≤–µ—Ç:', text);
            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç');
          }
          
          const data = await response.json();

          if (data.error) {
            throw new Error(data.error);
          }
          
          measurements = data.measurements || [];
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ä–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:', data.groupName, measurements.length);
          renderForm();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–∫:', error);
          showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–∫: ' + error.message);
        }
      }
      
      function renderForm() {
        if (measurements.length === 0) {
          showEmpty();
          return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–µ—Ä–æ–∫
        measurements.forEach(measurement => {
          if (!formData[measurement.id]) {
            formData[measurement.id] = '';
          }
        });
        
        fieldsEl.innerHTML = measurements.map(measurement => {
          const value = formData[measurement.id] || '';
          const validationError = validateMeasurement(measurement, value);
          const isRequired = measurement.required;
          const isFilled = value !== '' && value !== null && value !== undefined;
          
          return `
            <div class="custom-size-field" data-measurement-id="${measurement.id}">
              <label for="custom-size-${measurement.id}">
                ${measurement.name}
                ${isRequired ? '<span class="custom-size-required">*</span>' : ''}
              </label>
              ${measurement.description ? `<p class="custom-size-description">${measurement.description}</p>` : ''}
              <div class="custom-size-input-group">
                <input
                  id="custom-size-${measurement.id}"
                  type="number"
                  min="${measurement.minValue}"
                  max="${measurement.maxValue}"
                  step="${measurement.step}"
                  value="${value}"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                  ${isRequired ? 'required' : ''}
                  class="${validationError ? 'error' : ''} ${isRequired && !isFilled ? 'required-empty' : ''}"
                  data-measurement-id="${measurement.id}"
                  data-required="${isRequired}"
                />
                <span class="custom-size-unit">${measurement.unit}</span>
              </div>
              ${validationError ? `<p class="custom-size-error">${validationError}</p>` : ''}
              ${isRequired && !isFilled ? `<p class="custom-size-error">–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</p>` : ''}
              <p class="custom-size-range">
                –î–∏–∞–ø–∞–∑–æ–Ω: ${measurement.minValue} - ${measurement.maxValue} ${measurement.unit}
              </p>
            </div>
          `;
        }).join('');
        
        addEventListeners();
        showContent();
      }
      
      function addEventListeners() {
        const inputs = fieldsEl.querySelectorAll('input[type="number"]');
        inputs.forEach(input => {
          if (input) {
          input.addEventListener('input', handleInputChange);
          input.addEventListener('blur', handleInputBlur);
          }
        });
      }
      
      function validateMeasurement(measurement, value) {
        if (measurement.required && (!value || value === '')) {
          return '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
        }
        
        if (value && value !== '') {
          const numValue = parseInt(value);
          if (isNaN(numValue)) {
            return '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
          }
          
          if (numValue < measurement.minValue) {
            return `–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${measurement.minValue} ${measurement.unit}`;
          }
          
          if (numValue > measurement.maxValue) {
            return `–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ ${measurement.maxValue} ${measurement.unit}`;
          }
        }
        
        return null;
      }
      
      function handleInputChange(event) {
        const measurementId = parseInt(event.target.dataset.measurementId);
        const value = event.target.value;
        
        console.log(`handleInputChange: measurementId=${measurementId}, value=${value}`);
        formData[measurementId] = value;
        console.log('formData –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', formData);
        
        const measurement = measurements.find(m => m.id === measurementId);
        if (measurement) {
          const validationError = validateMeasurement(measurement, value);
          const errorEl = event.target.parentElement.parentElement.querySelector('.custom-size-error');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –ø–æ–ª—è
          event.target.classList.remove('error', 'required-empty');
          
          if (validationError) {
            event.target.classList.add('error');
            if (errorEl) {
              errorEl.textContent = validationError;
              errorEl.style.display = 'block';
            }
          } else {
            if (errorEl) {
              errorEl.style.display = 'none';
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
          const isRequired = measurement.required;
          const isFilled = value !== '' && value !== null && value !== undefined && !isNaN(parseInt(value));
          
          if (isRequired && !isFilled) {
            event.target.classList.add('required-empty');
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–∫–∏ –∫ —Ñ–æ—Ä–º–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        setTimeout(() => {
          addMeasurementsToForm();
        }, 100);
      }
      
      function handleInputBlur(event) {
        const measurementId = parseInt(event.target.dataset.measurementId);
        const measurement = measurements.find(m => m.id === measurementId);
        if (measurement) {
          let value = event.target.value;
          console.log(`handleInputBlur: measurementId=${measurementId}, value=${value}`);
          
          // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
          if (!measurement.required && (value === '' || value === null || value === undefined)) {
            formData[measurementId] = '';
            return;
          }
          
          // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (measurement.required && (value === '' || value === null || value === undefined)) {
            formData[measurementId] = '';
            return;
          }
          
          let numValue = parseInt(value);
          if (!numValue || isNaN(numValue)) {
            if (measurement.required) {
              formData[measurementId] = '';
              return;
            } else {
              formData[measurementId] = '';
              return;
            }
          }
          
          if (numValue < measurement.minValue) {
            numValue = measurement.minValue;
            event.target.value = numValue;
            formData[measurementId] = numValue;
          } else if (numValue > measurement.maxValue) {
            numValue = measurement.maxValue;
            event.target.value = numValue;
            formData[measurementId] = numValue;
          } else {
            formData[measurementId] = numValue;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–∫–∏ –∫ —Ñ–æ—Ä–º–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
          setTimeout(() => {
            addMeasurementsToForm();
          }, 100);
        }
      }
      
      function showContent() {
        loadingEl.style.display = 'none';
        contentEl.style.display = 'block';
        errorEl.style.display = 'none';
      }
      
      function showError(message) {
        loadingEl.style.display = 'none';
        contentEl.style.display = 'none';
        errorEl.textContent = message;
        errorEl.style.display = 'block';
      }
      
      function showEmpty() {
        loadingEl.style.display = 'none';
        contentEl.style.display = 'block';
        errorEl.style.display = 'none';
        fieldsEl.innerHTML = '<div class="custom-size-empty">–ú–µ—Ä–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</div>';
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–∫ –∫ —Ñ–æ—Ä–º–µ —Ç–æ–≤–∞—Ä–∞
      function addMeasurementsToForm() {
        try {
          // –ò—â–µ–º —Ñ–æ—Ä–º—É —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
          let productForm = null;
          const formSelectors = [
            'form[action*="/cart/add"]',
            '.product-form',
            'form[name="product-form"]',
            'form[action*="/cart"]'
          ];
          
          for (const selector of formSelectors) {
            const forms = document.querySelectorAll(selector);
            for (const form of forms) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞)
              const hasProductFields = form.querySelector('input[name="id"], input[name="product_id"], select[name="id"]');
              if (hasProductFields) {
                productForm = form;
                break;
              }
            }
            if (productForm) break;
          }
          
          if (!productForm) {
            console.log('–§–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Ñ–æ—Ä–º—É');
            productForm = document.querySelector('form');
          }
          
          if (!productForm) {
            console.log('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ–æ–±—â–µ');
            return;
          }
          
          console.log('–ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —Ç–æ–≤–∞—Ä–∞:', productForm);
          console.log('–î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–∫–∏ –∫ —Ñ–æ—Ä–º–µ —Ç–æ–≤–∞—Ä–∞');
          console.log('formData:', formData);
          console.log('measurements:', measurements);
          
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–∫
          const oldMeasurementFields = productForm.querySelectorAll('input[name^="properties["]');
          oldMeasurementFields.forEach(field => {
            if (field && field.parentNode && (field.name.includes('measurements') || field.name.includes('–†–æ—Å—Ç') || field.name.includes('–û–±—Ö–≤–∞—Ç') || field.name.includes('–î–ª–∏–Ω–∞'))) {
              field.parentNode.removeChild(field);
            }
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–∫
          let addedCount = 0;
          Object.keys(formData).forEach(measurementId => {
            const value = formData[measurementId];
            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä–∫—É ${measurementId}:`, value);
            if (value !== '' && value !== null && value !== undefined) {
              const measurement = measurements.find(m => m.id === parseInt(measurementId));
              console.log('–ù–∞–π–¥–µ–Ω–∞ –º–µ—Ä–∫–∞:', measurement);
              if (measurement) {
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ properties –¥–ª—è Shopify
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = `properties[${measurement.name}]`;
                input.value = `${value} ${measurement.unit}`;
                productForm.appendChild(input);
                addedCount++;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: ${measurement.name} = ${value} ${measurement.unit}`);
                
                // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const inputOld = document.createElement('input');
                inputOld.type = 'hidden';
                inputOld.name = `properties[measurements][${measurement.name}]`;
                inputOld.value = `${value} ${measurement.unit}`;
                productForm.appendChild(inputOld);
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç): measurements[${measurement.name}] = ${value} ${measurement.unit}`);
              }
            }
          });
          
          console.log(`–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ–π –º–µ—Ä–æ–∫: ${addedCount}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã
          const newMeasurementFields = productForm.querySelectorAll('input[name^="properties["]');
          console.log('–ü–æ–ª—è –º–µ—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–µ:', newMeasurementFields.length);
          newMeasurementFields.forEach(field => {
            console.log(`–ü–æ–ª–µ: ${field.name} = ${field.value}`);
          });
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–∫ –∫ —Ñ–æ—Ä–º–µ:', error);
        }
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
      function getProductInfo() {
        const info = {};
        
        console.log('=== getProductInfo ===');
        
        try {
          // 1. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ meta —Ç–µ–≥–æ–≤
          const productTags = document.querySelector('meta[property="product:tag"]');
          console.log('productTags meta:', productTags);
          if (productTags) {
            info.tags = productTags.getAttribute('content');
            console.log('–¢–µ–≥–∏ –∏–∑ meta:', info.tags);
          }
          
          // 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ data-product-json
          const productJson = document.querySelector('script[data-product-json]');
          console.log('productJson script:', productJson);
          if (productJson) {
            try {
              const productData = JSON.parse(productJson.textContent);
              console.log('productData:', productData);
              if (productData.tags) {
                info.tags = productData.tags;
                console.log('–¢–µ–≥–∏ –∏–∑ product JSON:', info.tags);
              }
              if (productData.product_type) {
                info.type = productData.product_type;
                console.log('–¢–∏–ø –∏–∑ product JSON:', info.type);
              }
              if (productData.vendor) {
                info.vendor = productData.vendor;
                console.log('–í–µ–Ω–¥–æ—Ä –∏–∑ product JSON:', info.vendor);
              }
            } catch (e) {
              console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ product JSON:', e);
            }
          }
          
          // 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
          const allScripts = document.querySelectorAll('script');
          console.log('–í—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allScripts.length);
          
          for (let i = 0; i < allScripts.length; i++) {
            const script = allScripts[i];
            const content = script.textContent || script.innerHTML;
            
            // –ò—â–µ–º —Å–∫—Ä–∏–ø—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ
            if (content.includes('"tags"') || content.includes('"product"')) {
              console.log(`–°–∫—Ä–∏–ø—Ç ${i} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ:`, script);
              try {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ —Å–∫—Ä–∏–ø—Ç–µ
                const jsonMatch = content.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                  const jsonData = JSON.parse(jsonMatch[0]);
                  console.log(`JSON –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ ${i}:`, jsonData);
                  
                  if (jsonData.tags && !info.tags) {
                    info.tags = jsonData.tags;
                    console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∫—Ä–∏–ø—Ç–µ:', info.tags);
                  }
                  
                  if (jsonData.product && jsonData.product.tags && !info.tags) {
                    info.tags = jsonData.product.tags;
                    console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ product:', info.tags);
                  }
                }
              } catch (e) {
                console.log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∫—Ä–∏–ø—Ç–∞ ${i}:`, e);
              }
            }
          }
          
          // 4. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ JSON-LD
          const jsonLdScripts = document.querySelectorAll('script[type="application/ld+json"]');
          console.log('JSON-LD —Å–∫—Ä–∏–ø—Ç—ã:', jsonLdScripts.length);
          jsonLdScripts.forEach((script, index) => {
            try {
              const data = JSON.parse(script.textContent);
              console.log(`JSON-LD ${index}:`, data);
              
              if (data['@type'] === 'Product') {
                if (data.category && !info.collections) {
                  info.collections = data.category;
                }
                if (data.description && data.description.includes('—Ç–µ–≥')) {
                  console.log('–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:', data.description);
                }
              }
            } catch (e) {
              console.log(`JSON-LD ${index} parse error:`, e);
            }
          });
          
          // 5. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ meta —Ç–µ–≥–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
          const metaSelectors = [
            'meta[property="product:tag"]',
            'meta[name="product:tag"]',
            'meta[property*="tag"]',
            'meta[name*="tag"]'
          ];
          
          for (const selector of metaSelectors) {
            const metaTags = document.querySelectorAll(selector);
            console.log(`Meta —Ç–µ–≥–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º "${selector}":`, metaTags.length);
            metaTags.forEach((meta, index) => {
              console.log(`Meta ${index}:`, meta.getAttribute('property') || meta.getAttribute('name'), '=', meta.getAttribute('content'));
              if (!info.tags && meta.getAttribute('content')) {
                info.tags = meta.getAttribute('content');
                console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ meta:', info.tags);
              }
            });
          }
          
          // 6. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ data-*
          const dataElements = document.querySelectorAll('[data-tags], [data-product-tags]');
          console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å data-tags:', dataElements.length);
          dataElements.forEach((el, index) => {
            const tags = el.getAttribute('data-tags') || el.getAttribute('data-product-tags');
            console.log(`Data tags ${index}:`, tags);
            if (tags && !info.tags) {
              info.tags = tags;
              console.log('–¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ data-–∞—Ç—Ä–∏–±—É—Ç–µ:', info.tags);
            }
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
          const productType = document.querySelector('meta[property="product:type"]');
          if (productType) {
            info.type = productType.getAttribute('content');
          }
          
          const productVendor = document.querySelector('meta[property="product:vendor"]');
          if (productVendor) {
            info.vendor = productVendor.getAttribute('content');
          }
          
          const productTemplate = document.querySelector('meta[name="template"]');
          if (productTemplate) {
            info.template = productTemplate.getAttribute('content');
          }
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:', error);
        }
        
        console.log('–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:', info);
        console.log('=== /getProductInfo ===');
        
        return info;
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –º–µ—Ä–æ–∫
      function initializeMeasurementForm() {
        try {
          console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –º–µ—Ä–æ–∫');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–∫–∏
      loadMeasurements();
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—Ä–∏–∞—Ü–∏–π
          setupVariantChangeListener();
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –º–µ—Ä–æ–∫:', error);
        }
      }
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—Ä–∏–∞—Ü–∏–π
      function setupVariantChangeListener() {
        try {
          console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—Ä–∏–∞—Ü–∏–π');
          
          // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π
          const variantSelectors = [
            'select[name="id"]',
            'select[name="product_id"]',
            'select[name="variant_id"]',
            '.product-form select',
            'form[action*="/cart/add"] select',
            'input[name*="Size"][type="radio"]',
            'input[name*="size"][type="radio"]',
            'input[name*="Size-1"][type="radio"]',
            '.product-form__input--pill input[type="radio"]'
          ];
          
          let foundSelector = null;
          let selectorType = null;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
          for (const selector of variantSelectors) {
            const elements = document.querySelectorAll(selector);
            if (elements.length > 0) {
              foundSelector = elements;
              selectorType = selector.includes('radio') ? 'radio' : 'select';
              console.log('–ù–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–∞—Ä–∏–∞—Ü–∏–π:', selector, '—Ç–∏–ø:', selectorType);
              break;
            }
          }
          
          if (!foundSelector) {
            console.log('–°–µ–ª–µ–∫—Ç–æ—Ä –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          if (selectorType === 'select') {
            // –î–ª—è select —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            foundSelector.forEach(select => {
              select.addEventListener('change', handleVariantChange);
              console.log('–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ change –¥–ª—è select:', select);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            foundSelector.forEach(select => {
              const selectedOption = select.options[select.selectedIndex];
              if (selectedOption) {
                const selectedValue = select.value;
                const selectedText = selectedOption.text;
                
                console.log('–¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è:', selectedValue, '—Ç–µ–∫—Å—Ç:', selectedText);
                
                const customSizeKeywords = [
                  'custom', 'custom size', 'custom-size', 'customsize',
                  '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
                  '–ø–æ –º–µ—Ä–∫–µ', '–ø–æ –º–µ—Ä–∫–∞–º', '–Ω–∞ –∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–Ω–æ–π',
                  'custom size', 'custom-size', 'customsize'
                ];
                
                const selectedValueLower = selectedValue.toLowerCase();
                const selectedTextLower = selectedText.toLowerCase();
                
                const isCustomSize = customSizeKeywords.some(keyword => 
                  selectedValueLower.includes(keyword) || selectedTextLower.includes(keyword)
                );
                
                if (isCustomSize) {
                  container.style.display = 'block';
                  console.log('–§–æ—Ä–º–∞ –º–µ—Ä–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)');
                }
              }
            });
          } else if (selectorType === 'radio') {
            // –î–ª—è radio —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            foundSelector.forEach(radio => {
              radio.addEventListener('change', handleVariantChange);
              console.log('–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ change –¥–ª—è radio:', radio);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const checkedRadio = Array.from(foundSelector).find(radio => radio.checked);
            if (checkedRadio) {
              const selectedValue = checkedRadio.value;
              console.log('–¢–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è (radio):', selectedValue);
              
              const customSizeKeywords = [
                'custom', 'custom size', 'custom-size', 'customsize',
                '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
                '–ø–æ –º–µ—Ä–∫–µ', '–ø–æ –º–µ—Ä–∫–∞–º', '–Ω–∞ –∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–Ω–æ–π',
                'custom size', 'custom-size', 'customsize'
              ];
              
              const selectedValueLower = selectedValue.toLowerCase();
              
              const isCustomSize = customSizeKeywords.some(keyword => 
                selectedValueLower.includes(keyword)
              );
              
              if (isCustomSize) {
                container.style.display = 'block';
                console.log('–§–æ—Ä–º–∞ –º–µ—Ä–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–∞ (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ radio)');
              }
            }
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
          const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
              if (mutation.type === 'childList' || mutation.type === 'attributes') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π
                const variantElements = document.querySelectorAll('select[name="id"], select[name="product_id"], select[name="variant_id"], input[name*="Size"][type="radio"]');
                variantElements.forEach(element => {
                  if (element.value && !element.hasAttribute('data-custom-size-listener')) {
                    element.setAttribute('data-custom-size-listener', 'true');
                    element.addEventListener('change', handleVariantChange);
                    console.log('–î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', element);
                  }
                });
              }
            });
          });
          
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
          observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['value', 'checked']
          });
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π:', error);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏
      function handleVariantChange(event) {
        try {
          const selectedValue = event.target.value;
          const selectedText = event.target.options ? event.target.options[event.target.selectedIndex]?.text : event.target.value;
          
          console.log('–ò–∑–º–µ–Ω–µ–Ω–∞ –≤–∞—Ä–∏–∞—Ü–∏—è:', selectedValue, '—Ç–µ–∫—Å—Ç:', selectedText);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è "Custom size"
          const customSizeKeywords = [
            'custom', 'custom size', 'custom-size', 'customsize',
            '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
            '–ø–æ –º–µ—Ä–∫–µ', '–ø–æ –º–µ—Ä–∫–∞–º', '–Ω–∞ –∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–Ω–æ–π',
            'custom size', 'custom-size', 'customsize'
          ];
          
          const selectedValueLower = selectedValue.toLowerCase();
          const selectedTextLower = selectedText.toLowerCase();
          
          const isCustomSize = customSizeKeywords.some(keyword => 
            selectedValueLower.includes(keyword) || selectedTextLower.includes(keyword)
          );
          
          console.log('–≠—Ç–æ Custom size?', isCustomSize);
          
          if (isCustomSize) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –º–µ—Ä–æ–∫
            container.style.display = 'block';
            console.log('–§–æ—Ä–º–∞ –º–µ—Ä–æ–∫ –ø–æ–∫–∞–∑–∞–Ω–∞');
          } else {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –º–µ—Ä–æ–∫
            container.style.display = 'none';
            console.log('–§–æ—Ä–º–∞ –º–µ—Ä–æ–∫ —Å–∫—Ä—ã—Ç–∞');
          }
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏:', error);
        }
      }
      

      

      

      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      initializeMeasurementForm();
      
      // üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –§–û–†–ú–£ –ú–ï–†–û–ö –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
      console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–´–í–ê–ï–ú –§–û–†–ú–£ –ú–ï–†–û–ö –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
      container.style.display = 'block';
    });
  </script>
</div> 

{% schema %}
{
  "name": "Custom Size Form",
  "target": "section",
  "settings": []
}
{% endschema %} 